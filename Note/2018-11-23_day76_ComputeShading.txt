CPU는 싱글코어였다.

Multi Programming
-> Multi Tasking

멀티 테스킹은 단점이 있다.
각각의 멀티 테스킹은 .exe로 나뉘어지는데, 프로세스 단위의 메모리 공유가 안됨.
ipc기법이 있음. 내부소켓을 이용하는 방법(pipeline 통신 방법), 매모리 맵 사용. (파일 사용)
그러나 ipc는 입출력이 빈번하게 발생되므로 인터럽트때문에 메모리 공유가 엄청나게 늦게 일어남.
그래서 답을 찾아낸게 쓰레드임.
멀티 테스킹을 쪼갬 -> Thread



1개의 Task - 전체 게임
      ㄴ 랜더링
	  ㄴ File I/O
	  ㄴ AI
	     .
		 .
		 .
		 .
		 .
		 
우선순위의 기준이 있음.
만약에 실행되고 있는 프로세스를 뺏을 수 있다면 선점형 스케쥴링 기법이 있음 (라운드 Robin)
못한다면 비선점형 스케쥴링 HRN

자원을 누가 선점할 것인가!?

먼저 가장 작은 단위인 Chunk로 나눈다.

인텔 TBB - 인텔에서 만든 Thread를 병렬로 처리.
AMD TBB - AMD에서 만든 Thread를 병렬로 처리.
이걸 <ppl>로 만듬. 근데 우리는 이걸 안쓰고 <thread>를 만듬.

ppl은 cpu의 쓰레드임.

Lock = 임계영역 = Critical Section


1998 - NVIDIA에서 GPU라는 개념을 만들어 냄.
이후 CUDA가 만들어짐.
DirectCompute가 만들어짐(GPU를 이용하여 CPU에서 처리하던 일을 함.)

Cpp AMP = DirectCompute



















